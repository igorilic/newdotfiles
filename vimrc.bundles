" :so % to refresh .vimrc after making changes
" :PlugInstall to install new plugin
" :PlugUpdate to update existing plugins
" :PlugClean after removing plugin

if &compatible
  set nocompatible
end

call plug#begin('~/.vim/plugged')

""" Theme / Pretty
"""

" [1]
Plug 'altercation/vim-colors-solarized'
Plug 'endel/vim-github-colorscheme'
" fugitive
Plug 'tpope/vim-fugitive' | Plug 'itchyny/lightline.vim'

" [2] File tree viewer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

"[3]
" Tmux will be better
Plug 'christoomey/vim-tmux-navigator'
Plug 'https://github.com/christoomey/vim-tmux-runner'
Plug 'christoomey/vim-run-interactive'

"[4]
" fuzzy finder
Plug 'ctrlpvim/ctrlp.vim'

"[5] Code highlighting and linting
Plug 'scrooloose/syntastic' "run linters and display errors
Plug 'pangloss/vim-javascript' | Plug 'mxw/vim-jsx'
Plug 'burnettk/vim-angular'
Plug 'mxw/vim-jsx'

" [6] adds a ; at the end of a line by pressing leader ;
Plug 'lfilho/cosco.vim'

Plug 'jiangmiao/auto-pairs'
Plug 'vim-scripts/HTML-AutoCloseTag' "close tags after >
Plug 'vim-scripts/tComment' "comment with gcc
Plug 'tpope/vim-repeat' "allow plugins to use . command
Plug 'tpope/vim-surround'
Plug 'vim-scripts/matchit.zip'

""" Utilities
"""
" [7] Make gists of current buffer
" View (https://github.com/mattn/gist-vim) for setup instructions
Plug 'mattn/webapi-vim' | Plug 'mattn/gist-vim'

" [8] Diary, notes
Plug 'vimwiki/vimwiki'

" Opens a browser for markdown files
Plug 'suan/vim-instant-markdown', {'do': 'npm install -g instant-markdown-d'}

" [9]
Plug 'SirVer/ultisnips' | Plug 'justinj/vim-react-snippets' | Plug 'colbycheeze/vim-snippets'

" [10]
" supertab makes tab work with autocomplete and ultisnips
Plug 'ervandew/supertab'
Plug 'https://github.com/Shougo/deoplete.nvim'
Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
Plug 'editorconfig/editorconfig-vim'


call plug#end()


""" Plugin related tweaks
"""

" [1]
" Color Scheme
syntax enable
let g:solarized_termcolors=256
" let g:solarized_termcolors=16
let g:colarized_termtrans = 1
let g:solarized_termcolors=256
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
colorscheme solarized
set background=dark
" Allow powerline symbols to show up
let g:airline_powerline_fonts = 1
" [2]
" Nerdtoogle
map <silent> <Leader>t :NERDTreeToggle<CR>
let g:NERDTreeIndicatorMapCustom = {
       \ "Modified"  : "✹",
       \ "Staged"    : "✚",
       \ "Untracked" : "✭",
       \ "Renamed"   : "➜",
       \ "Unmerged"  : "═",
       \ "Deleted"   : "✖",
       \ "Dirty"     : "✗",
       \ "Clean"     : "✔︎",
       \ "Unknown"   : "?",
       \ }
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" [3]
" Allow moving around between tmux windows
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 1

" Open a tmux pane with node
nnoremap <leader>node :VtrOpenRunner {'orientation': 'h', 'percentage': 50, 'cmd': 'node'}<cr>

" [4]
" Use the silver searcher

if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_working_path_mode = 'r'

    let g:ctrlp_use_caching = 0
    let g:ctrlp_extensions = ['line']
endif

" [5]
" Setup NEOMAKE plugin
" let g:neomake_scss_csslint_maker = ['sass-lint']
" let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_open_list = 0
" let g:neomake_warning_sign = {
"       \ 'texthl': 'WarningMsg',
"       \ }
"
" let g:neomake_error_sign = {
"       \ 'texthl': 'ErrorMsg',
"       \ }
" autocmd! BufWritePost,BufEnter * Neomake
"
" configure syntastic syntax checking to check on open as well as save
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_mode_map = { 'mode': 'active', 'active_filetypes': ['javascript'], 'passive_filetypes': []  }

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" Syntastic will search for an .eslintrc in your project, otherwise it defaults
autocmd FileType javascript let b:syntastic_checkers = findfile('.eslintrc', '.;') != '' ? ['eslint'] : ['standard']
" these 2 lines check to see if eslint is installed via local npm and runs that before going global

let s:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
let b:syntastic_javascript_eslint_exec = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
" " Allow highlighting of HTML within Javascript (for React)
let g:javascript_enable_domhtmlcss = 1
let g:jsx_ext_required = 0
" [6] Key mapping for Cosco.vim - space + ; add semicolon or Javascript or CSS
autocmd FileType javascript,css nnoremap <silent> <Leader>; :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css inoremap <silent> <Leader>; <c-o>:call cosco#commaOrSemiColon()<CR>

" [7] Gist setup
let g:gist_clip_command = 'pbcopy' "Using Gist will copy URL to clipboard automatically"
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" [9] Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

" [10] Make YCM compatible with UltiSnips (using supertab)
let g:SuperTabDefaultCompletionType = '<C-n'
let g:deoplete#enable_at_startup = 1
if !exists('g:deoplete#omni#input_patterns')
  let g:deoplete#omni#input_patterns = {}
endif
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" omnifuncs
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end

" tern
if exists('g:plugs["tern_for_vim"]')
  let g:tern_show_argument_hints = 'on_hold'
  let g:tern_show_signature_in_pum = 1
  let g:tern_map_keys = 1

  autocmd FileType javascript setlocal omnifunc=tern#Complete
endif

" set up path to editorconfig
let g:EditorConfig_exec_path = findfile('.editorconfig', '.;')


